{"version":3,"sources":["redux/actions.ts","components/superButton/SuperButton.tsx","components/counter/Сounter.tsx","components/superInputText/SuperInputText.tsx","components/settings/Settings.tsx","App.tsx","reportWebVitals.ts","redux/counter-reducer.ts","redux/store.ts","utils/localstorage-utils.ts","index.tsx","components/styles/Container.module.css","components/superButton/SuperButton.module.css","components/counter/Сounter.module.css","components/settings/Settings.module.css","components/superInputText/SuperInputText.module.css"],"names":["ACTIONS_TYPE","SuperButton","red","green","orange","className","restProps","finalClassName","s","default","Counter","props","inc","rec","counterValue","startValue","maxValue","checkDisableRec","checkDisableInc","display_red","display","errorValue","displayValue","error","container","upperBox","lowerBox","buttons","disabled","onClick","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","spanClassName","finalInputClassName","input","errorInput","superInput","e","currentTarget","value","key","Settings","changeMaxValue","changeStartValue","saveSettings","disabledHandler","valueHandler","valueInput","replace","trim","isFinite","dataset","trigger","length","settingItemBox","text","data-value","App","useSelector","state","counter","dispatch","useDispatch","CHANGE_MAX_VALUE","ChangeMaxValueAC","CHANGE_START_VALUE","ChangeStartValueAC","SAVE_SETTINGS","RESET_COUNTER","INCREMENT_COUNTER","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","toString","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4JAAYA,E,oHCoCGC,EAtBqC,SAAC,GAK/C,IAHEC,EAGH,EAHGA,IAAKC,EAGR,EAHQA,MAAOC,EAGf,EAHeA,OAAQC,EAGvB,EAHuBA,UACjBC,EAEN,oDACKC,EAAc,gBAClBC,IAAEC,QADgB,mBAElBP,EAAMM,IAAEN,IAAMM,IAAEC,QAFE,kBAGlBN,EAAQK,IAAEL,MAAQK,IAAEC,QAHF,kBAIlBL,EAASI,IAAEJ,OAASI,IAAEC,QAJJ,sBAKlBJ,GAGF,OACI,oCACIA,UAAWE,GACPD,KChBHI,EAA+B,SAAAC,GAAU,IAE9CC,EAKAD,EALAC,IACAC,EAIAF,EAJAE,IACAC,EAGAH,EAHAG,aACAC,EAEAJ,EAFAI,WACAC,EACAL,EADAK,SAGEC,EAAmC,KAAjBH,EAElBI,EAAkBD,GAAmBH,IAAiBE,EAEtDT,EAAiBW,EAAkBV,IAAEW,YAAcX,IAAEY,QAErDC,EAA4B,KAAfN,GAAkC,KAAbC,EAClC,8BACCD,IAAeC,EACZ,mBACA,sBAEJM,EAAgC,KAAjBR,EAAsBA,EACpC,sBAAKT,UAAWG,IAAEe,MAAlB,cAA2BF,EAA3B,OAGP,OACI,sBAAKhB,UAAWmB,IAAUA,UAA1B,UACI,qBAAKnB,UAAWmB,IAAUC,SAA1B,SACI,qBAAKpB,UAAWE,EAAhB,SACKe,MAIT,qBAAKjB,UAAWmB,IAAUE,SAA1B,SACI,sBAAKrB,UAAWG,IAAEmB,QAAlB,UACI,cAAC,EAAD,CAAaC,SAAUV,EAAiBW,QAASjB,EAAjD,iBAGA,cAAC,EAAD,CAAagB,SAAUX,EAAiBY,QAAShB,EAAjD,0B,gCCMLiB,EA3C2C,SAAC,GAUrD,IAREC,EAQH,EARGA,KACAC,EAOH,EAPGA,SAAUC,EAOb,EAPaA,aACVC,EAMH,EANGA,WAAYC,EAMf,EANeA,QACZZ,EAKH,EALGA,MACAlB,EAIH,EAJGA,UAEGC,GAEN,EAJc8B,cAId,8GAeKC,EAAmB,UAAM7B,IAAE8B,MAAR,aAAkBf,EAAQf,IAAE+B,WAAa/B,IAAEgC,WAA3C,YAAyDnC,GAElF,OACI,qBAAKA,UAAWG,IAAEgB,UAAlB,SACI,mCACIO,KAAMA,EACNC,SApBa,SAACS,GACtBT,GACGA,EAASS,GAEZR,GAAgBA,EAAaQ,EAAEC,cAAcC,QAiBrCT,WAfe,SAACO,GACxBP,GAAcA,EAAWO,GAEzBN,GACa,UAAVM,EAAEG,KACFT,KAWK9B,UAAWgC,GACP/B,OClCPuC,EAAwC,SAAAlC,GAAU,IAEvDmC,EAMAnC,EANAmC,eACAC,EAKApC,EALAoC,iBACAC,EAIArC,EAJAqC,aACAlC,EAGAH,EAHAG,aACAC,EAEAJ,EAFAI,WACAC,EACAL,EADAK,SAGEO,GAASR,IAAeC,EACxBiC,IACe,KAAflC,GAAkC,KAAbC,IACfD,GAAcC,GACE,KAAjBF,GAELoC,EAAe,SAACT,GAClB,IAAMU,EAAaV,EAAEC,cAAcC,MAC9BS,QAAQ,WAAY,IACpBA,QAAQ,MAAO,IACfC,OACL,GAAKC,UAAUH,IACXV,EAAEC,cAAca,QAAQZ,MAAO,CAC/B,IAAMa,EAAkBf,EAAEC,cAAca,QAAQZ,MAChC,QAAZa,GAAqBL,EAAWM,QAAU,EAC1CX,EAAeK,GACE,UAAZK,GAAuBL,EAAWM,QAAU,GACjDV,EAAiBI,KAI7B,OACI,sBAAK9C,UAAWmB,IAAUA,UAA1B,UACI,sBAAKnB,UAAWmB,IAAUC,SAA1B,UACI,sBAAKpB,UAAWG,IAAEkD,eAAlB,UACI,qBAAKrD,UAAWG,IAAEmD,KAAlB,wBAGA,8BACI,cAAC,EAAD,CAAgBC,aAAW,MACXjB,MAAO3B,EACPgB,SAAUkB,EACV3B,MAAOA,SAG/B,sBAAKlB,UAAWG,IAAEkD,eAAlB,UACI,qBAAKrD,UAAWG,IAAEmD,KAAlB,0BAGA,8BACI,cAAC,EAAD,CAAgBC,aAAW,QACXjB,MAAO5B,EACPiB,SAAUkB,EACV3B,MAAOA,YAMnC,qBAAKlB,UAAWmB,IAAUE,SAA1B,SACI,cAAC,EAAD,CAAaG,QAASmB,EAAcpB,SAAUqB,EAA9C,uB,iBJ5EJjD,K,sCAAAA,E,8BAAAA,E,8BAAAA,E,oCAAAA,E,wCAAAA,E,6DAAAA,M,KAuCL,IKxBM6D,EAAM,WAEf,IAAM/C,EAAegD,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQlD,gBACxEC,EAAa+C,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQjD,cACtEC,EAAW8C,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQhD,YACpEiD,EAAWC,cAuBjB,OACI,sBAAK7D,UAAU,MAAf,UACI,cAAC,EAAD,CACIU,WAAYA,EACZC,SAAUA,EACVF,aAAcA,EACdgC,eAlBW,SAACK,GACpBc,ELgCwB,SAACd,GAC7B,MAAO,CACHpB,KAAM/B,EAAamE,iBACnBhB,WAAYA,GKnCHiB,CAAiBjB,KAkBlBJ,iBAhBa,SAACI,GACtBc,ELsB0B,SAACd,GAC/B,MAAO,CACHpB,KAAM/B,EAAaqE,mBACnBlB,WAAYA,GKzBHmB,CAAmBnB,KAgBpBH,aAZS,WACjBiB,ELYG,CACHlC,KAAM/B,EAAauE,mBKAf,cAAC,EAAD,CACIxD,WAAYA,EACZC,SAAUA,EACVF,aAAcA,EACdD,IA/BA,WACRoD,ELmBG,CACHlC,KAAM/B,EAAawE,iBKWX5D,IApCA,WACRqD,ELiBG,CACHlC,KAAM/B,EAAayE,2BM3BZC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCNRQ,EAAe,CACjBrE,aAAc,GACdC,WAAY,GACZC,SAAU,I,QCARoE,EAAcC,YAAgB,CAChCrB,QDI0B,WAA2F,IAA1FD,EAAyF,uDAA/DoB,EAAcG,EAAiD,uCACpH,OAAQA,EAAOvD,MACX,KAAK/B,EAAamE,iBACd,OAAO,2BAAIJ,GAAX,IAAkB/C,SAAUsE,EAAOnC,WAAYrC,aAAc,KACjE,KAAKd,EAAaqE,mBACd,OAAO,2BAAIN,GAAX,IAAkBhD,WAAYuE,EAAOnC,WAAYrC,aAAc,KACnE,KAAKd,EAAayE,kBACd,OAAO,2BAAIV,GAAX,IAAkBjD,eAAgBiD,EAAMjD,aAAe,GAAGyE,aAC9D,KAAKvF,EAAawE,cAElB,KAAKxE,EAAauE,cACd,OAAO,2BAAIR,GAAX,IAAkBjD,aAAciD,EAAMhD,aAM1C,QACI,OAAOgD,MCnBNyB,EAAQC,YAAYL,ECRR,WACrB,IACI,IAAMM,EAAkBC,aAAaC,QAAQ,aAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QDAsCC,GAAaC,YAAgBC,MAE3EV,EAAMW,WAAU,YCES,SAACpC,GACtB,IACI,IAAM2B,EAAkBG,KAAKO,UAAUrC,GACvC4B,aAAaU,QAAQ,YAAaX,GACpC,WDLFY,CAAU,CACNtC,QAASwB,EAAMe,WAAWvC,aENlCwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUlB,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRmB,SAASC,eAAe,SAM1BlC,K,kBCnBAmC,EAAOC,QAAU,CAAC,UAAY,6BAA6B,SAAW,4BAA4B,SAAW,8B,kBCA7GD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,SAAW,8BAA8B,IAAM,yBAAyB,MAAQ,2BAA2B,OAAS,8B,kBCA7KD,EAAOC,QAAU,CAAC,QAAU,8BAAyB,YAAc,kCAA6B,QAAU,8BAAyB,MAAQ,8B,kBCA3ID,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,KAAO,yB,kBCA3ED,EAAOC,QAAU,CAAC,UAAY,kCAAkC,SAAW,iCAAiC,WAAa,mCAAmC,WAAa,sC","file":"static/js/main.0db97eb9.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    INCREMENT_COUNTER = 'INCREMENT_COUNTER',\r\n    RESET_COUNTER = 'RESET_COUNTER',\r\n    SAVE_SETTINGS = 'SAVE_SETTINGS',\r\n    CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE',\r\n    CHANGE_START_VALUE = 'CHANGE_START_VALUE',\r\n    SET_VALUE_FROM_LOCAL_STORAGE = 'SET_VALUE_FROM_LOCAL_STORAGE',\r\n}\r\n\r\ntype IncrementCounterType = {\r\n    type: ACTIONS_TYPE.INCREMENT_COUNTER\r\n}\r\ntype ResetCounterType = {\r\n    type: ACTIONS_TYPE.RESET_COUNTER\r\n}\r\ntype SaveSettingsType = {\r\n    type: ACTIONS_TYPE.SAVE_SETTINGS\r\n}\r\ntype ChangeMaxValueType = {\r\n    type: ACTIONS_TYPE.CHANGE_MAX_VALUE\r\n    valueInput: string\r\n}\r\ntype ChangeStarValueType = {\r\n    type: ACTIONS_TYPE.CHANGE_START_VALUE\r\n    valueInput: string\r\n}\r\ntype SetFromLocalStorageType = {\r\n    type: ACTIONS_TYPE.SET_VALUE_FROM_LOCAL_STORAGE\r\n    startValue: string\r\n    maxValue: string\r\n}\r\nexport type CounterReducerType = IncrementCounterType\r\n    | ChangeMaxValueType\r\n    | ChangeStarValueType\r\n    | ResetCounterType\r\n    | SaveSettingsType\r\n    | SetFromLocalStorageType\r\n\r\n\r\nexport const IncrementCounterAC = () => {\r\n    return {\r\n        type: ACTIONS_TYPE.INCREMENT_COUNTER,\r\n    }\r\n}\r\n\r\nexport const ResetCounterAC = () => {\r\n    return {\r\n        type: ACTIONS_TYPE.RESET_COUNTER\r\n    }\r\n}\r\n\r\nexport const SaveSettingsAC = () => {\r\n    return {\r\n        type: ACTIONS_TYPE.SAVE_SETTINGS\r\n    }\r\n}\r\n\r\nexport const ChangeStartValueAC = (valueInput: string): ChangeStarValueType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_START_VALUE,\r\n        valueInput: valueInput\r\n    }\r\n}\r\n\r\nexport const ChangeMaxValueAC = (valueInput: string): ChangeMaxValueType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_MAX_VALUE,\r\n        valueInput: valueInput\r\n\r\n    }\r\n}\r\n\r\n// export const SetFromLocalStorageAC = (startValue: string, maxValue: string): SetFromLocalStorageType => {\r\n//     return {\r\n//         type: ACTIONS_TYPE.SET_VALUE_FROM_LOCAL_STORAGE,\r\n//         startValue: startValue,\r\n//         maxValue: maxValue,\r\n//     }\r\n// }\r\n\r\n\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n\r\n    red?: boolean\r\n    green?: boolean\r\n    orange?: boolean\r\n\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, green, orange, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `\r\n    ${s.default}  \r\n    ${red ? s.red : s.default} \r\n    ${green ? s.green : s.default} \r\n    ${orange ? s.orange : s.default}     \r\n    ${className}`\r\n\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React from 'react';\nimport container from '../styles/Container.module.css'\nimport s from './Сounter.module.css'\nimport SuperButton from \"../superButton/SuperButton\";\n\n\ntype PropsType = {\n    inc: () => void\n    rec: () => void\n    counterValue: string\n    startValue: string\n    maxValue: string\n}\n\n\nexport const Counter: React.FC<PropsType> = props => {\n    const {\n        inc,\n        rec,\n        counterValue,\n        startValue,\n        maxValue\n    } = props;\n\n    const checkDisableRec = counterValue === \"\"\n\n    const checkDisableInc = checkDisableRec || counterValue === maxValue\n\n    const finalClassName = checkDisableInc ? s.display_red : s.display\n\n    const errorValue = startValue === \"\" || maxValue === \"\"\n        ? \"Enter start and max values\"\n        : +startValue >= +maxValue\n            ? \"Incorrect value!\"\n            : \"Press 'set' to save\"\n\n    const displayValue = counterValue !== '' ? counterValue\n        : (<div className={s.error}> {errorValue} </div>)\n\n\n    return (\n        <div className={container.container}>\n            <div className={container.upperBox}>\n                <div className={finalClassName}>\n                    {displayValue}\n                </div>\n\n            </div>\n            <div className={container.lowerBox}>\n                <div className={s.buttons}>\n                    <SuperButton disabled={checkDisableInc} onClick={inc}>\n                        inc\n                    </SuperButton>\n                    <SuperButton disabled={checkDisableRec} onClick={rec}>\n                        rec\n                    </SuperButton>\n                </div>\n            </div>\n\n\n        </div>\n    );\n}\n\n\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: boolean\r\n    spanClassName?: string\r\n\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalInputClassName = `${s.input}  ${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n           {/* <div className={s.selected}>\r\n                {error && <span className={finalSpanClassName}>{error}</span>}\r\n            </div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ChangeEvent} from 'react';\nimport container from '../styles/Container.module.css'\nimport s from './Settings.module.css'\nimport SuperButton from \"../superButton/SuperButton\";\nimport SuperInputText from \"../superInputText/SuperInputText\";\n\ntype SettingsPropsType = {\n    changeMaxValue: (valueInput: string) => void\n    changeStartValue: (valueInput: string) => void\n    saveSettings: () => void\n    counterValue: string\n    startValue: string\n    maxValue: string\n}\n\n\nexport const Settings: React.FC<SettingsPropsType> = props => {\n    const {\n        changeMaxValue,\n        changeStartValue,\n        saveSettings,\n        counterValue,\n        startValue,\n        maxValue,\n    } = props;\n\n    const error = +startValue >= +maxValue\n    const disabledHandler =\n        !(startValue !== '' && maxValue !== ''\n            && +startValue < +maxValue\n            && counterValue === '')\n\n    const valueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const valueInput = e.currentTarget.value\n            .replace(/^0+(?!$)/, \"\")\n            .replace(/\\./g, \"\")\n            .trim()\n        if (!isFinite(+valueInput)) return;\n        if (e.currentTarget.dataset.value) {\n            const trigger: string = e.currentTarget.dataset.value\n            if (trigger === 'max' && valueInput.length <= 7)\n                changeMaxValue(valueInput)\n            else if (trigger === 'start' && valueInput.length <= 7)\n                changeStartValue(valueInput)\n        }\n    }\n\n    return (\n        <div className={container.container}>\n            <div className={container.upperBox}>\n                <div className={s.settingItemBox}>\n                    <div className={s.text}>\n                        Max value:\n                    </div>\n                    <div>\n                        <SuperInputText data-value='max'\n                                        value={maxValue}\n                                        onChange={valueHandler}\n                                        error={error}/>\n                    </div>\n                </div>\n                <div className={s.settingItemBox}>\n                    <div className={s.text}>\n                        Start value:\n                    </div>\n                    <div>\n                        <SuperInputText data-value='start'\n                                        value={startValue}\n                                        onChange={valueHandler}\n                                        error={error}/>\n                    </div>\n\n                </div>\n            </div>\n\n            <div className={container.lowerBox}>\n                <SuperButton onClick={saveSettings} disabled={disabledHandler}>\n                    set\n                </SuperButton>\n            </div>\n\n\n        </div>\n    );\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./components/counter/Сounter\";\nimport {Settings} from \"./components/settings/Settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport {\n    ChangeMaxValueAC,\n    ChangeStartValueAC,\n    IncrementCounterAC,\n    ResetCounterAC,\n    SaveSettingsAC,\n} from \"./redux/actions\";\n\n\nexport const App = () => {\n\n    const counterValue = useSelector<AppStateType, string>(state => state.counter.counterValue)\n    const startValue = useSelector<AppStateType, string>(state => state.counter.startValue)\n    const maxValue = useSelector<AppStateType, string>(state => state.counter.maxValue)\n    const dispatch = useDispatch()\n\n    const inc = () => {\n        dispatch(IncrementCounterAC())\n    };\n    //сброс счетчика\n    const rec = () => {\n        dispatch(ResetCounterAC())\n    }\n\n    // изменение значения инпута по тригеру, с проверкой недопустимого ввода\n    const changeMaxValue = (valueInput: string) => {\n        dispatch(ChangeMaxValueAC(valueInput))\n    }\n    const changeStartValue = (valueInput: string) => {\n        dispatch(ChangeStartValueAC(valueInput))\n    }\n\n    //сохранение настроек\n    const saveSettings = () => {\n        dispatch(SaveSettingsAC())\n    }\n\n    return (\n        <div className=\"App\">\n            <Settings\n                startValue={startValue}\n                maxValue={maxValue}\n                counterValue={counterValue}\n                changeMaxValue={changeMaxValue}\n                changeStartValue={changeStartValue}\n                saveSettings={saveSettings}\n            />\n            <Counter\n                startValue={startValue}\n                maxValue={maxValue}\n                counterValue={counterValue}\n                rec={rec}\n                inc={inc}/>\n        </div>\n    );\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ACTIONS_TYPE, CounterReducerType} from \"./actions\";\r\n\r\n\r\nconst initialState = {\r\n    counterValue: \"\",\r\n    startValue: \"\",\r\n    maxValue: \"\",\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: CounterReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE:\r\n            return {...state, maxValue: action.valueInput, counterValue: ''}\r\n        case ACTIONS_TYPE.CHANGE_START_VALUE:\r\n            return {...state, startValue: action.valueInput, counterValue: ''}\r\n        case ACTIONS_TYPE.INCREMENT_COUNTER:\r\n            return {...state, counterValue: (+state.counterValue + 1).toString()};\r\n        case ACTIONS_TYPE.RESET_COUNTER:\r\n            return {...state, counterValue: state.startValue}\r\n        case ACTIONS_TYPE.SAVE_SETTINGS:\r\n            return {...state, counterValue: state.startValue}\r\n        // case ACTIONS_TYPE.SET_VALUE_FROM_LOCAL_STORAGE:\r\n        //     return {...state,\r\n        //         startValue: action.startValue,\r\n        //         maxValue: action.maxValue,\r\n        //         counterValue: action.startValue }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// THUNK\r\n// export const savaToLocalStorageTC = () => (dispatch: Dispatch, getState: () => AppStateType) => {\r\n//     let startValue = getState().counter.startValue\r\n//     let maxValue = getState().counter.maxValue\r\n//     localStorage.setItem('startValue', startValue)\r\n//     localStorage.setItem('maxValue', maxValue)\r\n//     dispatch(SaveSettingsAC())\r\n// }\r\n// export const setFromLocalStorageTC = () => (dispatch: Dispatch) => {\r\n//     let valueStart = localStorage.getItem('startValue')\r\n//     let valueMax = localStorage.getItem('maxValue')\r\n//     if (valueStart && valueMax) {\r\n//         dispatch(SetFromLocalStorageAC(valueStart, valueMax))\r\n//     }\r\n// }","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n","import {AppStateType} from \"../redux/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2fw4Q\",\"upperBox\":\"Container_upperBox__2k0NW\",\"lowerBox\":\"Container_lowerBox__1weWr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1_hDr\",\"disabled\":\"SuperButton_disabled__3tvAF\",\"red\":\"SuperButton_red__3RrIR\",\"green\":\"SuperButton_green__3gBHa\",\"orange\":\"SuperButton_orange__TWugd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Сounter_display__1s0-R\",\"display_red\":\"Сounter_display_red__2KMV-\",\"buttons\":\"Сounter_buttons__eSfZ-\",\"error\":\"Сounter_error__3JLf5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingItemBox\":\"Settings_settingItemBox__3Mzo7\",\"text\":\"Settings_text__2ScMX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SuperInputText_container__1HTD8\",\"selected\":\"SuperInputText_selected__sYty3\",\"superInput\":\"SuperInputText_superInput__3ct2s\",\"errorInput\":\"SuperInputText_errorInput__968yQ\"};"],"sourceRoot":""}